<h1 class = "page-header">Methods</h1>
<p>Now that we know numbers, letters and variables lets mix them up. Methods are little collections of reusable code. They allow us to repeat actions or sets of actions, and make writing flexible and modular programs a whole lot easier.</p>

<h4 class = "page-header">to_s</h4>
<p>The first method we are going to look at is .to_s. I highly encourage you to begin to look at the <a href = "http://ruby-doc.org/core-2.2.0">Ruby documentation</a>. I refer to these docs constantly.</p>
<pre>1.to_s</pre>
<p>Output is <strong>"1"</strong></p>

<h4 class = "page-header">to_i</h4>
<pre>"1".to_i </pre>
<p>Output is <strong>1</strong></p>

<h4 class = "page-header">gets</h4>
<p>Just like <strong>puts</strong> handles outputs <strong>gets</strong> handles inputs.</p>
<pre>
  puts "Hello what is your name"
  name = gets
  puts "Hello " + name + " it is nice to meet you!"
</pre>
<p>Output is: <strong>Hello Lawrence /n it is nice to meet you!</strong></p>
<p>Why the line break? need to use another method <strong>chomp</strong>.</p>
<pre>
  puts "Hello what is your name"
  name = gets.chomp
  puts "Hello " + name + " it is nice to meet you!"
</pre>
<p>Output is: <strong>Hello Lawrence it is nice to meet you!</strong></p>

<h4 class = "page-header">Practice</h4>

<p>Write a program which asks for a persons first name, then middle, then last. Finally, it should greet the person using their full name.</p>
<p>Write a program which asks for a persons favorite number. Have your program add one to the number</p>
